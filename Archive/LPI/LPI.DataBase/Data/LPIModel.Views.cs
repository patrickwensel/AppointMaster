//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Data.Mapping.EntityViewGenerationAttribute(typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets07F33FA8B2E360FBEA6366CA14F5995A))]

namespace Edm_EntityMappingGeneratedViews
{
    
    
    /// <Summary>
    /// The type contains views for EntitySets and AssociationSets that were generated at design time.
    /// </Summary>
    public sealed class ViewsForBaseEntitySets07F33FA8B2E360FBEA6366CA14F5995A : System.Data.Mapping.EntityViewContainer
    {
        
        /// <Summary>
        /// The constructor stores the views for the extents and also the hash values generated based on the metadata and mapping closure and views.
        /// </Summary>
        public ViewsForBaseEntitySets07F33FA8B2E360FBEA6366CA14F5995A()
        {
            this.EdmEntityContainerName = "LPIContext";
            this.StoreEntityContainerName = "LPIDataStoreContainer";
            this.HashOverMappingClosure = "3ee0f1674945155b4191fc2b27a48f8f";
            this.HashOverAllExtentViews = "374cedfaea5150c3699be58ca8006f8e";
            this.ViewCount = 24;
        }
        
        /// <Summary>
        /// The method returns the view for the index given.
        /// </Summary>
        protected override System.Collections.Generic.KeyValuePair<string, string> GetViewAt(int index)
        {
            if ((index == 0))
            {
                return GetView0();
            }
            if ((index == 1))
            {
                return GetView1();
            }
            if ((index == 2))
            {
                return GetView2();
            }
            if ((index == 3))
            {
                return GetView3();
            }
            if ((index == 4))
            {
                return GetView4();
            }
            if ((index == 5))
            {
                return GetView5();
            }
            if ((index == 6))
            {
                return GetView6();
            }
            if ((index == 7))
            {
                return GetView7();
            }
            if ((index == 8))
            {
                return GetView8();
            }
            if ((index == 9))
            {
                return GetView9();
            }
            if ((index == 10))
            {
                return GetView10();
            }
            if ((index == 11))
            {
                return GetView11();
            }
            if ((index == 12))
            {
                return GetView12();
            }
            if ((index == 13))
            {
                return GetView13();
            }
            if ((index == 14))
            {
                return GetView14();
            }
            if ((index == 15))
            {
                return GetView15();
            }
            if ((index == 16))
            {
                return GetView16();
            }
            if ((index == 17))
            {
                return GetView17();
            }
            if ((index == 18))
            {
                return GetView18();
            }
            if ((index == 19))
            {
                return GetView19();
            }
            if ((index == 20))
            {
                return GetView20();
            }
            if ((index == 21))
            {
                return GetView21();
            }
            if ((index == 22))
            {
                return GetView22();
            }
            if ((index == 23))
            {
                return GetView23();
            }
            throw new System.IndexOutOfRangeException();
        }
        
        /// <Summary>
        /// return view for LPIDataStoreContainer.ACCOUNT
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView0()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("LPIDataStoreContainer.ACCOUNT", "\r\n    SELECT VALUE -- Constructing ACCOUNT\r\n        [LPIData.Store.ACCOUNT](T1.AC" +
                    "COUNT_DB, T1.ACCOUNT_created, T1.ACCOUNT_name, T1.ACCOUNT_mainDoctorName, T1.ACC" +
                    "OUNT_notificationEmail, T1.ACCOUNT_address, T1.ACCOUNT_addressLine2, T1.ACCOUNT_" +
                    "city, T1.ACCOUNT_state, T1.ACCOUNT_zipCode, T1.ACCOUNT_mainPhone, T1.ACCOUNT_fax" +
                    ", T1.ACCOUNT_software, T1.ACCOUNT_status, T1.ACCOUNT_mainContact, T1.ACCOUNT_web" +
                    "Site, T1.ACCOUNT_userId, T1.ACCOUNT_password, T1.ACCOUNT_DataLinkUserId, T1.ACCO" +
                    "UNT_DataLinkPassword, T1.ACCOUNT_AMServer, T1.ACCOUNT_AMSubscribeReminders, T1.A" +
                    "CCOUNT_trueNewPatientOnly, T1.ACCOUNT_GroupId, T1.ACCOUNT_PartnerId, T1.ACCOUNT_" +
                    "WebServicePassword)\r\n    FROM (\r\n        SELECT \r\n            T.ID AS ACCOUNT_DB" +
                    ", \r\n            T.created AS ACCOUNT_created, \r\n            T.name AS ACCOUNT_na" +
                    "me, \r\n            T.mainDoctorName AS ACCOUNT_mainDoctorName, \r\n            T.no" +
                    "tificationEmail AS ACCOUNT_notificationEmail, \r\n            T.address AS ACCOUNT" +
                    "_address, \r\n            T.addressLine2 AS ACCOUNT_addressLine2, \r\n            T." +
                    "city AS ACCOUNT_city, \r\n            T.state AS ACCOUNT_state, \r\n            T.zi" +
                    "pCode AS ACCOUNT_zipCode, \r\n            T.mainPhone AS ACCOUNT_mainPhone, \r\n    " +
                    "        T.fax AS ACCOUNT_fax, \r\n            T.software AS ACCOUNT_software, \r\n  " +
                    "          T.status AS ACCOUNT_status, \r\n            T.mainContact AS ACCOUNT_mai" +
                    "nContact, \r\n            T.webSite AS ACCOUNT_webSite, \r\n            T.userId AS " +
                    "ACCOUNT_userId, \r\n            T.password AS ACCOUNT_password, \r\n            T.Da" +
                    "taLinkUserId AS ACCOUNT_DataLinkUserId, \r\n            T.DataLinkPassword AS ACCO" +
                    "UNT_DataLinkPassword, \r\n            T.AMServer AS ACCOUNT_AMServer, \r\n          " +
                    "  T.AMSubscribeReminders AS ACCOUNT_AMSubscribeReminders, \r\n            T.trueNe" +
                    "wPatientOnly AS ACCOUNT_trueNewPatientOnly, \r\n            T.GroupId AS ACCOUNT_G" +
                    "roupId, \r\n            T.PartnerId AS ACCOUNT_PartnerId, \r\n            T.WebServi" +
                    "cePassword AS ACCOUNT_WebServicePassword, \r\n            True AS _from0\r\n        " +
                    "FROM LPIContext.Accounts AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for LPIContext.Accounts
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView1()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2058);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Accounts\r\n        [LPI.DataBase.Data.Account]");
            viewString.Append("(T1.Account_ID, T1.Account_created, T1.Account_name, T1.Account_mainDoctorName, ");
            viewString.Append("T1.Account_notificationEmail, T1.Account_address, T1.Account_addressLine2, T1.Ac");
            viewString.Append("count_city, T1.Account_state, T1.Account_zipCode, T1.Account_mainPhone, T1.Accou");
            viewString.Append("nt_fax, T1.Account_software, T1.Account_status, T1.Account_mainContact, T1.Accou");
            viewString.Append("nt_webSite, T1.Account_userId, T1.Account_password, T1.Account_DataLinkUserId, T");
            viewString.Append("1.Account_DataLinkPassword, T1.Account_AMServer, T1.Account_AMSubscribeReminders");
            viewString.Append(", T1.Account_trueNewPatientOnly, T1.Account_GroupId, T1.Account_PartnerId, T1.Ac");
            viewString.Append("count_WebServicePassword)\r\n    FROM (\r\n        SELECT \r\n            T.DB AS Acco");
            viewString.Append("unt_ID, \r\n            T.created AS Account_created, \r\n            T.name AS Acco");
            viewString.Append("unt_name, \r\n            T.mainDoctorName AS Account_mainDoctorName, \r\n          ");
            viewString.Append("  T.notificationEmail AS Account_notificationEmail, \r\n            T.address AS A");
            viewString.Append("ccount_address, \r\n            T.addressLine2 AS Account_addressLine2, \r\n        ");
            viewString.Append("    T.city AS Account_city, \r\n            T.state AS Account_state, \r\n          ");
            viewString.Append("  T.zipCode AS Account_zipCode, \r\n            T.mainPhone AS Account_mainPhone, ");
            viewString.Append("\r\n            T.fax AS Account_fax, \r\n            T.software AS Account_software");
            viewString.Append(", \r\n            T.status AS Account_status, \r\n            T.mainContact AS Accou");
            viewString.Append("nt_mainContact, \r\n            T.webSite AS Account_webSite, \r\n            T.user");
            viewString.Append("Id AS Account_userId, \r\n            T.password AS Account_password, \r\n          ");
            viewString.Append("  T.DataLinkUserId AS Account_DataLinkUserId, \r\n            T.DataLinkPassword A");
            viewString.Append("S Account_DataLinkPassword, \r\n            T.AMServer AS Account_AMServer, \r\n    ");
            viewString.Append("        T.AMSubscribeReminders AS Account_AMSubscribeReminders, \r\n            T.");
            viewString.Append("trueNewPatientOnly AS Account_trueNewPatientOnly, \r\n            T.GroupId AS Acc");
            viewString.Append("ount_GroupId, \r\n            T.PartnerId AS Account_PartnerId, \r\n            T.We");
            viewString.Append("bServicePassword AS Account_WebServicePassword, \r\n            True AS _from0\r\n  ");
            viewString.Append("      FROM LPIDataStoreContainer.ACCOUNT AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("LPIContext.Accounts", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for LPIDataStoreContainer.APPLIUSER
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView2()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("LPIDataStoreContainer.APPLIUSER", @"
    SELECT VALUE -- Constructing APPLIUSER
        [LPIData.Store.APPLIUSER](T1.APPLIUSER_DB, T1.APPLIUSER_ID, T1.APPLIUSER_PartnerID, T1.APPLIUSER_name, T1.APPLIUSER_username, T1.APPLIUSER_password, T1.APPLIUSER_profile, T1.APPLIUSER_email)
    FROM (
        SELECT 
            T.AccountID AS APPLIUSER_DB, 
            T.ID AS APPLIUSER_ID, 
            T.PartnerID AS APPLIUSER_PartnerID, 
            T.name AS APPLIUSER_name, 
            T.username AS APPLIUSER_username, 
            T.password AS APPLIUSER_password, 
            T.profile AS APPLIUSER_profile, 
            T.email AS APPLIUSER_email, 
            True AS _from0
        FROM LPIContext.AppliUsers AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for LPIContext.AppliUsers
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView3()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("LPIContext.AppliUsers", @"
    SELECT VALUE -- Constructing AppliUsers
        [LPI.DataBase.Data.AppliUser](T1.AppliUser_AccountID, T1.AppliUser_ID, T1.AppliUser_PartnerID, T1.AppliUser_name, T1.AppliUser_username, T1.AppliUser_password, T1.AppliUser_profile, T1.AppliUser_email)
    FROM (
        SELECT 
            T.DB AS AppliUser_AccountID, 
            T.ID AS AppliUser_ID, 
            T.PartnerID AS AppliUser_PartnerID, 
            T.name AS AppliUser_name, 
            T.username AS AppliUser_username, 
            T.password AS AppliUser_password, 
            T.profile AS AppliUser_profile, 
            T.email AS AppliUser_email, 
            True AS _from0
        FROM LPIDataStoreContainer.APPLIUSER AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for LPIDataStoreContainer.CAMPAIGN
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView4()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("LPIDataStoreContainer.CAMPAIGN", @"
    SELECT VALUE -- Constructing CAMPAIGN
        [LPIData.Store.CAMPAIGN](T1.CAMPAIGN_DB, T1.CAMPAIGN_ID, T1.CAMPAIGN_name, T1.CAMPAIGN_phoneNumber, T1.CAMPAIGN_budget, T1.CAMPAIGN_visible)
    FROM (
        SELECT 
            T.AccountID AS CAMPAIGN_DB, 
            T.ID AS CAMPAIGN_ID, 
            T.name AS CAMPAIGN_name, 
            T.phoneNumber AS CAMPAIGN_phoneNumber, 
            T.budget AS CAMPAIGN_budget, 
            T.visible AS CAMPAIGN_visible, 
            True AS _from0
        FROM LPIContext.Campaigns AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for LPIContext.Campaigns
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView5()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("LPIContext.Campaigns", @"
    SELECT VALUE -- Constructing Campaigns
        [LPI.DataBase.Data.Campaign](T1.Campaign_AccountID, T1.Campaign_ID, T1.Campaign_name, T1.Campaign_phoneNumber, T1.Campaign_budget, T1.Campaign_visible)
    FROM (
        SELECT 
            T.DB AS Campaign_AccountID, 
            T.ID AS Campaign_ID, 
            T.name AS Campaign_name, 
            T.phoneNumber AS Campaign_phoneNumber, 
            T.budget AS Campaign_budget, 
            T.visible AS Campaign_visible, 
            True AS _from0
        FROM LPIDataStoreContainer.CAMPAIGN AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for LPIDataStoreContainer.PARTNER
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView6()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("LPIDataStoreContainer.PARTNER", @"
    SELECT VALUE -- Constructing PARTNER
        [LPIData.Store.PARTNER](T1.PARTNER_ID, T1.PARTNER_Name, T1.PARTNER_Address, T1.PARTNER_Address2, T1.PARTNER_City, T1.PARTNER_State, T1.PARTNER_Zip, T1.PARTNER_Phone, T1.PARTNER_Email, T1.PARTNER_MainContact)
    FROM (
        SELECT 
            T.ID AS PARTNER_ID, 
            T.Name AS PARTNER_Name, 
            T.Address AS PARTNER_Address, 
            T.Address2 AS PARTNER_Address2, 
            T.City AS PARTNER_City, 
            T.State AS PARTNER_State, 
            T.Zip AS PARTNER_Zip, 
            T.Phone AS PARTNER_Phone, 
            T.Email AS PARTNER_Email, 
            T.MainContact AS PARTNER_MainContact, 
            True AS _from0
        FROM LPIContext.Partners AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for LPIContext.Partners
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView7()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("LPIContext.Partners", @"
    SELECT VALUE -- Constructing Partners
        [LPI.DataBase.Data.Partner](T1.Partner_ID, T1.Partner_Name, T1.Partner_Address, T1.Partner_Address2, T1.Partner_City, T1.Partner_State, T1.Partner_Zip, T1.Partner_Phone, T1.Partner_Email, T1.Partner_MainContact)
    FROM (
        SELECT 
            T.ID AS Partner_ID, 
            T.Name AS Partner_Name, 
            T.Address AS Partner_Address, 
            T.Address2 AS Partner_Address2, 
            T.City AS Partner_City, 
            T.State AS Partner_State, 
            T.Zip AS Partner_Zip, 
            T.Phone AS Partner_Phone, 
            T.Email AS Partner_Email, 
            T.MainContact AS Partner_MainContact, 
            True AS _from0
        FROM LPIDataStoreContainer.PARTNER AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for LPIDataStoreContainer.PATIENT
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView8()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("LPIDataStoreContainer.PATIENT", @"
    SELECT VALUE -- Constructing PATIENT
        [LPIData.Store.PATIENT](T1.PATIENT_DB, T1.PATIENT_AMID, T1.PATIENT_name, T1.PATIENT_firstName, T1.PATIENT_SSN, T1.PATIENT_male, T1.PATIENT_birthDate, T1.PATIENT_address, T1.PATIENT_addressLine2, T1.PATIENT_city, T1.PATIENT_state, T1.PATIENT_zipCode, T1.PATIENT_homePhone, T1.PATIENT_cellPhone, T1.PATIENT_workPhone, T1.PATIENT_email, T1.PATIENT_created, T1.PATIENT_ReferredBy, T1.PATIENT_ResponsibleParty)
    FROM (
        SELECT 
            T.AccountID AS PATIENT_DB, 
            T.ID AS PATIENT_AMID, 
            T.name AS PATIENT_name, 
            T.firstName AS PATIENT_firstName, 
            T.SSN AS PATIENT_SSN, 
            T.male AS PATIENT_male, 
            T.birthDate AS PATIENT_birthDate, 
            T.address AS PATIENT_address, 
            T.addressLine2 AS PATIENT_addressLine2, 
            T.city AS PATIENT_city, 
            T.state AS PATIENT_state, 
            T.zipCode AS PATIENT_zipCode, 
            T.homePhone AS PATIENT_homePhone, 
            T.cellPhone AS PATIENT_cellPhone, 
            T.workPhone AS PATIENT_workPhone, 
            T.email AS PATIENT_email, 
            T.created AS PATIENT_created, 
            T.ReferredBy AS PATIENT_ReferredBy, 
            T.ResponsibleParty AS PATIENT_ResponsibleParty, 
            True AS _from0
        FROM LPIContext.Patients AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for LPIContext.Patients
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView9()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("LPIContext.Patients", @"
    SELECT VALUE -- Constructing Patients
        [LPI.DataBase.Data.Patient](T1.Patient_AccountID, T1.Patient_ID, T1.Patient_name, T1.Patient_firstName, T1.Patient_SSN, T1.Patient_male, T1.Patient_birthDate, T1.Patient_address, T1.Patient_addressLine2, T1.Patient_city, T1.Patient_state, T1.Patient_zipCode, T1.Patient_homePhone, T1.Patient_cellPhone, T1.Patient_workPhone, T1.Patient_email, T1.Patient_created, T1.Patient_ReferredBy, T1.Patient_ResponsibleParty)
    FROM (
        SELECT 
            T.DB AS Patient_AccountID, 
            T.AMID AS Patient_ID, 
            T.name AS Patient_name, 
            T.firstName AS Patient_firstName, 
            T.SSN AS Patient_SSN, 
            T.male AS Patient_male, 
            T.birthDate AS Patient_birthDate, 
            T.address AS Patient_address, 
            T.addressLine2 AS Patient_addressLine2, 
            T.city AS Patient_city, 
            T.state AS Patient_state, 
            T.zipCode AS Patient_zipCode, 
            T.homePhone AS Patient_homePhone, 
            T.cellPhone AS Patient_cellPhone, 
            T.workPhone AS Patient_workPhone, 
            T.email AS Patient_email, 
            T.created AS Patient_created, 
            T.ReferredBy AS Patient_ReferredBy, 
            T.ResponsibleParty AS Patient_ResponsibleParty, 
            True AS _from0
        FROM LPIDataStoreContainer.PATIENT AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for LPIDataStoreContainer.SYSOPTION
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView10()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("LPIDataStoreContainer.SYSOPTION", @"
    SELECT VALUE -- Constructing SYSOPTION
        [LPIData.Store.SYSOPTION](T1.SYSOPTION_DB, T1.SYSOPTION_name, T1.SYSOPTION_value)
    FROM (
        SELECT 
            T.AccountID AS SYSOPTION_DB, 
            T.name AS SYSOPTION_name, 
            T.[value] AS SYSOPTION_value, 
            True AS _from0
        FROM LPIContext.SysOptions AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for LPIContext.SysOptions
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView11()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("LPIContext.SysOptions", @"
    SELECT VALUE -- Constructing SysOptions
        [LPI.DataBase.Data.SysOption](T1.SysOption_AccountID, T1.SysOption_name, T1.SysOption_value)
    FROM (
        SELECT 
            T.DB AS SysOption_AccountID, 
            T.name AS SysOption_name, 
            T.[value] AS SysOption_value, 
            True AS _from0
        FROM LPIDataStoreContainer.SYSOPTION AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for LPIDataStoreContainer.UNIQUE_ID
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView12()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("LPIDataStoreContainer.UNIQUE_ID", @"
    SELECT VALUE -- Constructing UNIQUE_ID
        [LPIData.Store.UNIQUE_ID](T1.[UNIQUE_ID.TABLE_NAME], T1.[UNIQUE_ID.LAST_ID])
    FROM (
        SELECT 
            T.TABLE_NAME AS [UNIQUE_ID.TABLE_NAME], 
            T.LAST_ID AS [UNIQUE_ID.LAST_ID], 
            True AS _from0
        FROM LPIContext.UniqueIds AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for LPIContext.UniqueIds
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView13()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("LPIContext.UniqueIds", @"
    SELECT VALUE -- Constructing UniqueIds
        [LPI.DataBase.Data.UniqueId](T1.[UniqueId.TABLE_NAME], T1.[UniqueId.LAST_ID])
    FROM (
        SELECT 
            T.TABLE_NAME AS [UniqueId.TABLE_NAME], 
            T.LAST_ID AS [UniqueId.LAST_ID], 
            True AS _from0
        FROM LPIDataStoreContainer.UNIQUE_ID AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for LPIDataStoreContainer.APPOINTMENT
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView14()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("LPIDataStoreContainer.APPOINTMENT", @"
    SELECT VALUE -- Constructing APPOINTMENT
        [LPIData.Store.APPOINTMENT](T1.APPOINTMENT_DB, T1.APPOINTMENT_dateTime, T1.APPOINTMENT_patientId)
    FROM (
        SELECT 
            T.AccountID AS APPOINTMENT_DB, 
            T.dateTime AS APPOINTMENT_dateTime, 
            T.patientId AS APPOINTMENT_patientId, 
            True AS _from0
        FROM LPIContext.Appointments AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for LPIContext.Appointments
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView15()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("LPIContext.Appointments", @"
    SELECT VALUE -- Constructing Appointments
        [LPI.DataBase.Data.Appointment](T1.Appointment_AccountID, T1.Appointment_dateTime, T1.Appointment_patientId)
    FROM (
        SELECT 
            T.DB AS Appointment_AccountID, 
            T.dateTime AS Appointment_dateTime, 
            T.patientId AS Appointment_patientId, 
            True AS _from0
        FROM LPIDataStoreContainer.APPOINTMENT AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for LPIDataStoreContainer.DELETEDLEAD
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView16()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("LPIDataStoreContainer.DELETEDLEAD", @"
    SELECT VALUE -- Constructing DELETEDLEAD
        [LPIData.Store.DELETEDLEAD](T1.DELETEDLEAD_DB, T1.DELETEDLEAD_campaignID, T1.DELETEDLEAD_PrimaryPhone, T1.DELETEDLEAD_timeStamp)
    FROM (
        SELECT 
            T.AccountID AS DELETEDLEAD_DB, 
            T.campaignID AS DELETEDLEAD_campaignID, 
            T.PrimaryPhone AS DELETEDLEAD_PrimaryPhone, 
            T.timeStamp AS DELETEDLEAD_timeStamp, 
            True AS _from0
        FROM LPIContext.DeletedLeads AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for LPIContext.DeletedLeads
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView17()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("LPIContext.DeletedLeads", @"
    SELECT VALUE -- Constructing DeletedLeads
        [LPI.DataBase.Data.DeletedLead](T1.DeletedLead_AccountID, T1.DeletedLead_campaignID, T1.DeletedLead_PrimaryPhone, T1.DeletedLead_timeStamp)
    FROM (
        SELECT 
            T.DB AS DeletedLead_AccountID, 
            T.campaignID AS DeletedLead_campaignID, 
            T.PrimaryPhone AS DeletedLead_PrimaryPhone, 
            T.timeStamp AS DeletedLead_timeStamp, 
            True AS _from0
        FROM LPIDataStoreContainer.DELETEDLEAD AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for LPIDataStoreContainer.DENTALPROCEDURE
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView18()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("LPIDataStoreContainer.DENTALPROCEDURE", @"
    SELECT VALUE -- Constructing DENTALPROCEDURE
        [LPIData.Store.DENTALPROCEDURE](T1.DENTALPROCEDURE_DB, T1.DENTALPROCEDURE_patientId, T1.DENTALPROCEDURE_CODE, T1.DENTALPROCEDURE_apptId, T1.DENTALPROCEDURE_dateTime, T1.DENTALPROCEDURE_amount, T1.DENTALPROCEDURE_ID, T1.DENTALPROCEDURE_treatmentPlan)
    FROM (
        SELECT 
            T.DB AS DENTALPROCEDURE_DB, 
            T.patientId AS DENTALPROCEDURE_patientId, 
            T.CODE AS DENTALPROCEDURE_CODE, 
            T.apptId AS DENTALPROCEDURE_apptId, 
            T.dateTime AS DENTALPROCEDURE_dateTime, 
            T.amount AS DENTALPROCEDURE_amount, 
            T.ID AS DENTALPROCEDURE_ID, 
            T.treatmentPlan AS DENTALPROCEDURE_treatmentPlan, 
            True AS _from0
        FROM LPIContext.DentalProcedures AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for LPIContext.DentalProcedures
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView19()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("LPIContext.DentalProcedures", @"
    SELECT VALUE -- Constructing DentalProcedures
        [LPI.DataBase.Data.DentalProcedure](T1.DentalProcedure_DB, T1.DentalProcedure_patientId, T1.DentalProcedure_CODE, T1.DentalProcedure_apptId, T1.DentalProcedure_dateTime, T1.DentalProcedure_amount, T1.DentalProcedure_ID, T1.DentalProcedure_treatmentPlan)
    FROM (
        SELECT 
            T.DB AS DentalProcedure_DB, 
            T.patientId AS DentalProcedure_patientId, 
            T.CODE AS DentalProcedure_CODE, 
            T.apptId AS DentalProcedure_apptId, 
            T.dateTime AS DentalProcedure_dateTime, 
            T.amount AS DentalProcedure_amount, 
            T.ID AS DentalProcedure_ID, 
            T.treatmentPlan AS DentalProcedure_treatmentPlan, 
            True AS _from0
        FROM LPIDataStoreContainer.DENTALPROCEDURE AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for LPIDataStoreContainer.LEAD
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView20()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2127);
            viewString.Append("\r\n    SELECT VALUE -- Constructing LEAD\r\n        [LPIData.Store.LEAD](T1.LEAD_ID");
            viewString.Append(", T1.LEAD_DB, T1.LEAD_campaignID, T1.LEAD_inComingNumber, T1.LEAD_timeStamp, T1.");
            viewString.Append("LEAD_durationMinutes, T1.LEAD_newPatient, T1.LEAD_patientId, T1.LEAD_fileURL, T1");
            viewString.Append(".LEAD_birthday, T1.LEAD_dentalNeed, T1.LEAD_dentalCareIsFor, T1.LEAD_preferredAp");
            viewString.Append("pointmentTime, T1.LEAD_insurancePlanBudget, T1.LEAD_firstName, T1.LEAD_lastName,");
            viewString.Append(" T1.LEAD_email, T1.LEAD_PrimaryPhone, T1.LEAD_source, T1.LEAD_medium, T1.LEAD_te");
            viewString.Append("rm, T1.LEAD_content, T1.LEAD_campaign, T1.[LEAD.referred_by], T1.LEAD_original, ");
            viewString.Append("T1.LEAD_alterPrimaryPhone, T1.LEAD_alterName, T1.LEAD_alterFirstName, T1.LEAD_Ma");
            viewString.Append("tchingStatus)\r\n    FROM (\r\n        SELECT \r\n            T.ID AS LEAD_ID, \r\n     ");
            viewString.Append("       T.DB AS LEAD_DB, \r\n            T.campaignID AS LEAD_campaignID, \r\n       ");
            viewString.Append("     T.inComingNumber AS LEAD_inComingNumber, \r\n            T.timeStamp AS LEAD_");
            viewString.Append("timeStamp, \r\n            T.durationMinutes AS LEAD_durationMinutes, \r\n          ");
            viewString.Append("  T.newPatient AS LEAD_newPatient, \r\n            T.patientId AS LEAD_patientId, ");
            viewString.Append("\r\n            T.fileURL AS LEAD_fileURL, \r\n            T.birthday AS LEAD_birthd");
            viewString.Append("ay, \r\n            T.dentalNeed AS LEAD_dentalNeed, \r\n            T.dentalCareIsF");
            viewString.Append("or AS LEAD_dentalCareIsFor, \r\n            T.preferredAppointmentTime AS LEAD_pre");
            viewString.Append("ferredAppointmentTime, \r\n            T.insurancePlanBudget AS LEAD_insurancePlan");
            viewString.Append("Budget, \r\n            T.firstName AS LEAD_firstName, \r\n            T.lastName AS");
            viewString.Append(" LEAD_lastName, \r\n            T.email AS LEAD_email, \r\n            T.PrimaryPhon");
            viewString.Append("e AS LEAD_PrimaryPhone, \r\n            T.source AS LEAD_source, \r\n            T.m");
            viewString.Append("edium AS LEAD_medium, \r\n            T.term AS LEAD_term, \r\n            T.content");
            viewString.Append(" AS LEAD_content, \r\n            T.campaign AS LEAD_campaign, \r\n            T.ref");
            viewString.Append("erred_by AS [LEAD.referred_by], \r\n            T.original AS LEAD_original, \r\n   ");
            viewString.Append("         T.alterPrimaryPhone AS LEAD_alterPrimaryPhone, \r\n            T.alterNam");
            viewString.Append("e AS LEAD_alterName, \r\n            T.alterFirstName AS LEAD_alterFirstName, \r\n  ");
            viewString.Append("          T.MatchingStatus AS LEAD_MatchingStatus, \r\n            True AS _from0\r");
            viewString.Append("\n        FROM LPIContext.LEAD AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("LPIDataStoreContainer.LEAD", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for LPIContext.LEAD
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView21()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2142);
            viewString.Append("\r\n    SELECT VALUE -- Constructing LEAD\r\n        [LPI.DataBase.Data.LEAD](T1.LEA");
            viewString.Append("D_ID, T1.LEAD_DB, T1.LEAD_campaignID, T1.LEAD_inComingNumber, T1.LEAD_timeStamp,");
            viewString.Append(" T1.LEAD_durationMinutes, T1.LEAD_newPatient, T1.LEAD_patientId, T1.LEAD_fileURL");
            viewString.Append(", T1.LEAD_birthday, T1.LEAD_dentalNeed, T1.LEAD_dentalCareIsFor, T1.LEAD_preferr");
            viewString.Append("edAppointmentTime, T1.LEAD_insurancePlanBudget, T1.LEAD_firstName, T1.LEAD_lastN");
            viewString.Append("ame, T1.LEAD_email, T1.LEAD_PrimaryPhone, T1.LEAD_source, T1.LEAD_medium, T1.LEA");
            viewString.Append("D_term, T1.LEAD_content, T1.LEAD_campaign, T1.[LEAD.referred_by], T1.LEAD_origin");
            viewString.Append("al, T1.LEAD_alterPrimaryPhone, T1.LEAD_alterName, T1.LEAD_alterFirstName, T1.LEA");
            viewString.Append("D_MatchingStatus)\r\n    FROM (\r\n        SELECT \r\n            T.ID AS LEAD_ID, \r\n ");
            viewString.Append("           T.DB AS LEAD_DB, \r\n            T.campaignID AS LEAD_campaignID, \r\n   ");
            viewString.Append("         T.inComingNumber AS LEAD_inComingNumber, \r\n            T.timeStamp AS L");
            viewString.Append("EAD_timeStamp, \r\n            T.durationMinutes AS LEAD_durationMinutes, \r\n      ");
            viewString.Append("      T.newPatient AS LEAD_newPatient, \r\n            T.patientId AS LEAD_patient");
            viewString.Append("Id, \r\n            T.fileURL AS LEAD_fileURL, \r\n            T.birthday AS LEAD_bi");
            viewString.Append("rthday, \r\n            T.dentalNeed AS LEAD_dentalNeed, \r\n            T.dentalCar");
            viewString.Append("eIsFor AS LEAD_dentalCareIsFor, \r\n            T.preferredAppointmentTime AS LEAD");
            viewString.Append("_preferredAppointmentTime, \r\n            T.insurancePlanBudget AS LEAD_insurance");
            viewString.Append("PlanBudget, \r\n            T.firstName AS LEAD_firstName, \r\n            T.lastNam");
            viewString.Append("e AS LEAD_lastName, \r\n            T.email AS LEAD_email, \r\n            T.Primary");
            viewString.Append("Phone AS LEAD_PrimaryPhone, \r\n            T.source AS LEAD_source, \r\n           ");
            viewString.Append(" T.medium AS LEAD_medium, \r\n            T.term AS LEAD_term, \r\n            T.con");
            viewString.Append("tent AS LEAD_content, \r\n            T.campaign AS LEAD_campaign, \r\n            T");
            viewString.Append(".referred_by AS [LEAD.referred_by], \r\n            T.original AS LEAD_original, \r");
            viewString.Append("\n            T.alterPrimaryPhone AS LEAD_alterPrimaryPhone, \r\n            T.alte");
            viewString.Append("rName AS LEAD_alterName, \r\n            T.alterFirstName AS LEAD_alterFirstName, ");
            viewString.Append("\r\n            T.MatchingStatus AS LEAD_MatchingStatus, \r\n            True AS _fr");
            viewString.Append("om0\r\n        FROM LPIDataStoreContainer.LEAD AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("LPIContext.LEAD", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for LPIDataStoreContainer.LeadBean
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView22()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2372);
            viewString.Append("\r\n    SELECT VALUE -- Constructing LeadBean\r\n        [LPIData.Store.LeadBean](T1");
            viewString.Append(".LeadBean_ID, T1.LeadBean_DB, T1.LeadBean_campaignID, T1.LeadBean_inComingNumber");
            viewString.Append(", T1.LeadBean_timeStamp, T1.LeadBean_durationMinutes, T1.LeadBean_newPatient, T1");
            viewString.Append(".LeadBean_patientId, T1.LeadBean_fileURL, T1.LeadBean_birthday, T1.LeadBean_dent");
            viewString.Append("alNeed, T1.LeadBean_dentalCareIsFor, T1.LeadBean_preferredAppointmentTime, T1.Le");
            viewString.Append("adBean_insurancePlanBudget, T1.LeadBean_firstName, T1.LeadBean_lastName, T1.Lead");
            viewString.Append("Bean_email, T1.LeadBean_PrimaryPhone, T1.LeadBean_source, T1.LeadBean_medium, T1");
            viewString.Append(".LeadBean_term, T1.LeadBean_content, T1.LeadBean_campaign, T1.[LeadBean.referred");
            viewString.Append("_by], T1.LeadBean_original, T1.LeadBean_alterPrimaryPhone, T1.LeadBean_alterName");
            viewString.Append(", T1.LeadBean_alterFirstName, T1.LeadBean_MatchingStatus)\r\n    FROM (\r\n        S");
            viewString.Append("ELECT \r\n            T.ID AS LeadBean_ID, \r\n            T.DB AS LeadBean_DB, \r\n  ");
            viewString.Append("          T.campaignID AS LeadBean_campaignID, \r\n            T.inComingNumber AS");
            viewString.Append(" LeadBean_inComingNumber, \r\n            T.timeStamp AS LeadBean_timeStamp, \r\n   ");
            viewString.Append("         T.durationMinutes AS LeadBean_durationMinutes, \r\n            T.newPatie");
            viewString.Append("nt AS LeadBean_newPatient, \r\n            T.patientId AS LeadBean_patientId, \r\n  ");
            viewString.Append("          T.fileURL AS LeadBean_fileURL, \r\n            T.birthday AS LeadBean_bi");
            viewString.Append("rthday, \r\n            T.dentalNeed AS LeadBean_dentalNeed, \r\n            T.denta");
            viewString.Append("lCareIsFor AS LeadBean_dentalCareIsFor, \r\n            T.preferredAppointmentTime");
            viewString.Append(" AS LeadBean_preferredAppointmentTime, \r\n            T.insurancePlanBudget AS Le");
            viewString.Append("adBean_insurancePlanBudget, \r\n            T.firstName AS LeadBean_firstName, \r\n ");
            viewString.Append("           T.lastName AS LeadBean_lastName, \r\n            T.email AS LeadBean_em");
            viewString.Append("ail, \r\n            T.PrimaryPhone AS LeadBean_PrimaryPhone, \r\n            T.sour");
            viewString.Append("ce AS LeadBean_source, \r\n            T.medium AS LeadBean_medium, \r\n            ");
            viewString.Append("T.term AS LeadBean_term, \r\n            T.content AS LeadBean_content, \r\n        ");
            viewString.Append("    T.campaign AS LeadBean_campaign, \r\n            T.referred_by AS [LeadBean.re");
            viewString.Append("ferred_by], \r\n            T.original AS LeadBean_original, \r\n            T.alter");
            viewString.Append("PrimaryPhone AS LeadBean_alterPrimaryPhone, \r\n            T.alterName AS LeadBea");
            viewString.Append("n_alterName, \r\n            T.alterFirstName AS LeadBean_alterFirstName, \r\n      ");
            viewString.Append("      T.MatchingStatus AS LeadBean_MatchingStatus, \r\n            True AS _from0\r");
            viewString.Append("\n        FROM LPIContext.LeadBeans AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("LPIDataStoreContainer.LeadBean", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for LPIContext.LeadBeans
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView23()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2387);
            viewString.Append("\r\n    SELECT VALUE -- Constructing LeadBeans\r\n        [LPI.DataBase.Data.LeadBea");
            viewString.Append("n](T1.LeadBean_ID, T1.LeadBean_DB, T1.LeadBean_campaignID, T1.LeadBean_inComingN");
            viewString.Append("umber, T1.LeadBean_timeStamp, T1.LeadBean_durationMinutes, T1.LeadBean_newPatien");
            viewString.Append("t, T1.LeadBean_patientId, T1.LeadBean_fileURL, T1.LeadBean_birthday, T1.LeadBean");
            viewString.Append("_dentalNeed, T1.LeadBean_dentalCareIsFor, T1.LeadBean_preferredAppointmentTime, ");
            viewString.Append("T1.LeadBean_insurancePlanBudget, T1.LeadBean_firstName, T1.LeadBean_lastName, T1");
            viewString.Append(".LeadBean_email, T1.LeadBean_PrimaryPhone, T1.LeadBean_source, T1.LeadBean_mediu");
            viewString.Append("m, T1.LeadBean_term, T1.LeadBean_content, T1.LeadBean_campaign, T1.[LeadBean.ref");
            viewString.Append("erred_by], T1.LeadBean_original, T1.LeadBean_alterPrimaryPhone, T1.LeadBean_alte");
            viewString.Append("rName, T1.LeadBean_alterFirstName, T1.LeadBean_MatchingStatus)\r\n    FROM (\r\n    ");
            viewString.Append("    SELECT \r\n            T.ID AS LeadBean_ID, \r\n            T.DB AS LeadBean_DB,");
            viewString.Append(" \r\n            T.campaignID AS LeadBean_campaignID, \r\n            T.inComingNumb");
            viewString.Append("er AS LeadBean_inComingNumber, \r\n            T.timeStamp AS LeadBean_timeStamp, ");
            viewString.Append("\r\n            T.durationMinutes AS LeadBean_durationMinutes, \r\n            T.new");
            viewString.Append("Patient AS LeadBean_newPatient, \r\n            T.patientId AS LeadBean_patientId,");
            viewString.Append(" \r\n            T.fileURL AS LeadBean_fileURL, \r\n            T.birthday AS LeadBe");
            viewString.Append("an_birthday, \r\n            T.dentalNeed AS LeadBean_dentalNeed, \r\n            T.");
            viewString.Append("dentalCareIsFor AS LeadBean_dentalCareIsFor, \r\n            T.preferredAppointmen");
            viewString.Append("tTime AS LeadBean_preferredAppointmentTime, \r\n            T.insurancePlanBudget ");
            viewString.Append("AS LeadBean_insurancePlanBudget, \r\n            T.firstName AS LeadBean_firstName");
            viewString.Append(", \r\n            T.lastName AS LeadBean_lastName, \r\n            T.email AS LeadBe");
            viewString.Append("an_email, \r\n            T.PrimaryPhone AS LeadBean_PrimaryPhone, \r\n            T");
            viewString.Append(".source AS LeadBean_source, \r\n            T.medium AS LeadBean_medium, \r\n       ");
            viewString.Append("     T.term AS LeadBean_term, \r\n            T.content AS LeadBean_content, \r\n   ");
            viewString.Append("         T.campaign AS LeadBean_campaign, \r\n            T.referred_by AS [LeadBe");
            viewString.Append("an.referred_by], \r\n            T.original AS LeadBean_original, \r\n            T.");
            viewString.Append("alterPrimaryPhone AS LeadBean_alterPrimaryPhone, \r\n            T.alterName AS Le");
            viewString.Append("adBean_alterName, \r\n            T.alterFirstName AS LeadBean_alterFirstName, \r\n ");
            viewString.Append("           T.MatchingStatus AS LeadBean_MatchingStatus, \r\n            True AS _f");
            viewString.Append("rom0\r\n        FROM LPIDataStoreContainer.LeadBean AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("LPIContext.LeadBeans", viewString.ToString());
        }
    }
}
